#include <algorithm>
#include <array>
#include <iomanip>
#include <iostream>
#include <string>
#include <unordered_map>

using namespace std;

double calc(array<int, 5> my, array<int, 5> opp, int dmg);
string hashArr(array<int, 5> my, array<int, 5> opp);

unordered_map<string, double> table;
int n, m, dmg;

int main() {
  ios_base::sync_with_stdio(false); // unsync streams
  cin.tie(NULL); // disable flushing cout before cin

  int totalLife = 0;
  int oppLife = 0;

  cin >> n >> m >> dmg;

  array<int, 5> my = {0};
  array<int, 5> opp = {0};

  for (int i = 0; i < n; i++) {
    cin >> my[i];
    totalLife += my[i];
  }
  for (int i = 0; i < m; i++) {
    cin >> opp[i];
    totalLife += opp[i];
    oppLife += opp[i];
  }

  if (totalLife <= dmg) {
    cout << 1 << "\n";
  } else if (oppLife > dmg) {
    cout << 0 << "\n";
  } else {
    double chance = calc(my, opp, dmg);
    cout << std::setprecision(10) << chance << "\n";
  }
  return 0;
}

double calc(array<int, 5> my, array<int, 5> opp, int dmg) {

  string key = hashArr(my, opp);
  double res = 0;

  unordered_map<string, double>::const_iterator foundKey = table.find(key);

  if (foundKey != table.end()) {
    return foundKey->second;
  }
  bool oppAlive = false;
  int oppLife = 0;
  for (int i = 0; i < 5; i++) {
    if (opp[i] != 0) {
      oppAlive = true;
      oppLife += opp[i];
    }
  }

  if (!oppAlive) {
    res = 1;
  } else if (dmg == 0 || oppLife > dmg) {
    res = 0;
  } else {
    double sum = 0;
    int calls = 0;
    for (int i = 0; i < 5; i++) {
      if (my[i] != 0) {
        array<int, 5> NextMy = my;
        NextMy[i]--;
        sort(begin(NextMy), end(NextMy));
        sum += calc(NextMy, opp, dmg - 1);
        calls++;
      }
    }

    for (int i = 0; i < 5; i++) {
      if (opp[i] != 0) {
        array<int, 5> NextOpp = opp;
        NextOpp[i]--;
        sort(begin(NextOpp), end(NextOpp));
        sum += calc(my, NextOpp, dmg - 1);
        calls++;
      }
    }
    res = sum / calls;
  }
  table.insert(make_pair(key, res));
  return res;
}

string hashArr(array<int, 5> my, array<int, 5> opp) {
  string key;
  for (int i = 0; i < 5; i++) {
    key += to_string(my[i]);
  }
  for (int i = 0; i < 5; i++) {
    key += to_string(opp[i]);
  }
  return key;
}