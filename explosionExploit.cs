using System;
using System.Collections.Generic;
namespace Program {
    public static class main {
        static int n;
        static int m;
        static int dmg;
        static Dictionary<string, double> hashTable = new Dictionary<string, double>();
        public static void Main(string[] args) {
            string[] line1 = Console.ReadLine().Split(' ');
            n = int.Parse(line1[0]);
            m = int.Parse(line1[1]);
            dmg = int.Parse(line1[2]);
            string[] line2 = Console.ReadLine().Split(' ');
            string[] line3 = Console.ReadLine().Split(' ');
            int[] my = new int[line2.Length];
            int totalLife = 0;
            int oppLife = 0;
            for(int i = 0; i < my.Length; i++) {
                my[i] = int.Parse(line2[i]);
                totalLife += my[i];
            }

            int[] opp = new int[line3.Length];
            for(int i = 0; i < opp.Length; i++) {
                opp[i] = int.Parse(line3[i]);
                totalLife += opp[i];
                oppLife += opp[i];
            }
            if(totalLife <= dmg) {
                Console.WriteLine(1);
            } else if(oppLife > dmg) {
                Console.WriteLine(0);
            } else{
                double chance = calc(my, opp, dmg);
                Console.WriteLine(chance);
            }
        }

        public static double calc(int[] my, int[] opp, int dmg) {
            string key = hash(my, opp);
            double res = 0;
            if(hashTable.ContainsKey(key)) {
                return hashTable[key];
            }
            bool oppAlive = false;
            int oppLife = 0;
            for(int i = 0; i < m; i++) {
                if(opp[i] != 0) {
                    oppAlive = true;
                    oppLife += opp[i];
                }
            }
            if(!oppAlive) {
                res = 1;
            } else if(dmg == 0 || oppLife > dmg) {
                res = 0;
            } else {
                double sum = 0;
                int calls = 0;
                for(int i = 0; i < n; i++) {
                    if(my[i] != 0) {
                        int[] newMy = (int[])my.Clone();
                        newMy[i]--;
                        Array.Sort(newMy);
                        sum += calc(newMy, opp, dmg - 1);
                        calls++;
                    }
                }

                for(int i = 0; i < m; i++) {
                    if(opp[i] != 0) {
                        int[] newOpp = (int[])opp.Clone();
                        newOpp[i]--;
                        Array.Sort(newOpp);
                        sum += calc(my, newOpp, dmg - 1);
                        calls++;
                    }
                }
                res = sum / calls;
            }
            hashTable[key] = res;
            return res;
        }

        public static string hash(int[] my, int[] opp) {
            string key = "";
            for(int i = 0; i < n; i++) {
                key += my[i];
            }
            for(int i = 0; i < m; i++) {
                key += opp[i];
            }
            return key;
        }
    }
}